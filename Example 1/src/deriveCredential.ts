import {
  Bls12381G2KeyPair,
  BbsBlsSignature2020,
  BbsBlsSignatureProof2020,
  deriveProof
} from "@mattrglobal/jsonld-signatures-bbs";
import { extendContextLoader, sign, verify, purposes } from "jsonld-signatures";
var fs = require('fs');


import inputCredential from "./data/Credential.json";
import keyPair from "./data/keyPair.json";
import exampleControllerDoc from "./data/controllerDocument.json";
import bbsContext from "./data/bbs.json";
import revealFrame from "./data/ProofFrame.json";
import Context from "./data/Context.json";
import credentialContext from "./data/credentialsContext.json";


// load files from a local cache 
const documents: any = {
  "did:example:489398593#test": keyPair,
  "did:example:489398593": exampleControllerDoc,
  "https://w3id.org/security/bbs/v1": bbsContext,
  "https://w3id.org/citizenship/v1": Context,
  "https://www.w3.org/2018/credentials/v1": credentialContext,
  "http://schema.org/": Context,
  "https://w3id.org/security/v2": bbsContext

};


// Loader to get the neseseary documents (Context etc.) from a local cache 
const customDocLoader = (url: string): any => {
  const context = documents[url];
  return {
      contextUrl: null,
      document: context, 
      documentUrl: url
    };
};


const documentLoader: any = extendContextLoader(customDocLoader);


const main = async (): Promise<void> => {
  //Import the local key pair
  const IssuerKeys = await new Bls12381G2KeyPair(keyPair);

  // ISSUER
  // Sign the Credential
  const signedCredential = await sign(inputCredential, {
    suite: new BbsBlsSignature2020({ key: IssuerKeys }),
    purpose: new purposes.AssertionProofPurpose(),
    documentLoader
  });

  console.log("-----------------------------------------------------------------------------------------------");
  console.log(">>> Input Credential Signed: ");
  console.log(JSON.stringify(signedCredential, null, 2));

  // HOLDER
  // Derive a proof of knowledge disclosing only a subset of the claims
  // (the ones defined by the revealFrame document)
  const derivedCredential= await deriveProof(signedCredential, revealFrame, {
    suite: new BbsBlsSignatureProof2020(),
    documentLoader
  });

  console.log("-----------------------------------------------------------------------------------------------");
  console.log(">>> Derived Credential: ")
  console.log(JSON.stringify(derivedCredential, null, 2));
  console.log("-----------------------------------------------------------------------------------------------");
  // Save the derived credential to a JSON file

  fs.writeFileSync("./src/data/DerivedCredential.json", JSON.stringify(derivedCredential, null, 2), function(err: any){
    if(err){
      console.log(err);
    }
});

};

main();


